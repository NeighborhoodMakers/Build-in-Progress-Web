<script>   
var stepAncestry=""; // string for holding the ancestry of a step
if("<%= @stepIDs %>".length > 0){
  var stepIDs = JSON.parse("<%= @stepIDs %>"); // array of step ids in order of position  
}
var branches = []; // Array holding information about the branched step in the format [index, position, id]
var returnedBranch = new Array(); // branch in which the user has returned to
var reorderMode = false; // toggle for rearranging steps
var originalStepOrder; // stores original step table when page is loaded

var editMode = Boolean(<%=source=='edit'%>); // boolean to determine if we're on an index page of an edit page
var newMode = Boolean(<%=source=='new'%>);
var indexMode = Boolean(<%=source=='index'%>);
var showMode = Boolean(<%=source=='show'%>);
var newProject = parseInt("<%=@project.steps.count %>") == 0; // whether or not the project does not contain any steps

if(newMode){
  var newStepParentID = "<%=@parentID%>";  
}

var firstLoaded = true;  // boolean to store whether or not the original state of the process map should be saved (to originalStepOrder)
var stepClick = false; // distinguish between mouse scroll, manual scroll, or jquery scroll
var clickedStep = ""; // used to determine what the parent of a step should be

var historyIndex = 0; // indexing history instances
var orgHistory = []; // save history for population the org chart

var currentStep; // used for jumping to a particular step from the process map

var authorLoggedIn; 

// whether we need to rename the new step element for a branch
var is_branch_label = "<%=params[:label]%>" == "true";

var mouseInProcessMap = false;

var PIN_TYPES = new Object();
PIN_TYPES['exclamation'] = 'fa fa-exclamation-circle';
PIN_TYPES['frown'] = 'fa fa-frown-o';
PIN_TYPES['flag'] = 'fa fa-flag';
PIN_TYPES['lightbulb'] = 'fa fa-lightbulb-o';
PIN_TYPES['map'] = 'fa fa-map-pin';
PIN_TYPES['smile'] = 'fa fa-smile-o';
PIN_TYPES['thumbs_up'] = 'fa fa-thumbs-o-up';
PIN_TYPES["thumbs_down"] = 'fa fa-thumbs-down';

</script>

<% #Draw Progress Map %>
<ul id="org" class="0" style="display:none" >
     <%= render :partial => 'steps/draw_list'%>
</ul>    

<div id="chart" class="orgChart">
</div> 


 <script type="text/javascript">

 var minimized = false;

 /* -------- RETRIEVE STEP ATTRIBUTES ---------- */

    // function ancestry(id) - finds the ancestry of step given its id, using the $('#org') ul
    function ancestry(id){
      var step_ancestry = "";
      var parents = $('li.'+id).parents('ul').not('.0').get().reverse();
      if(parents.length==0){
        step_ancestry = "0"
      }else{
        $(parents).each(function(){
          if(step_ancestry.length == 0){
            step_ancestry = $(this).attr('class');
          }else{
            step_ancestry = step_ancestry + "/" + $(this).attr('class');  
          }
        });
      }
      return step_ancestry
    }

    function position(id){
      // get the position of the step
      return parseInt($('#org').find('li').index($('li.'+id)));
    }

      // stepMapArray - creates an object with the format {step_id:[position,ancestry]} for all steps
      function createStepMapArray(){
        var stepArray = {};
        $('#org').find('li').each(function(index,value){
          var step_id = getID($(this).attr('class'));
          var step_position = index;
          var step_ancestry = ancestry(step_id);
          // console.log('id: ' + step_id + ' position: ' + step_position + ' ancestry: ' + step_ancestry);
          stepArray[step_id] = [step_position, step_ancestry];
        });
        return stepArray;
      }

  /* -------- RETRIEVE STEP ATTRIBUTES END ---------- */
  

  /* -------- PROCESS MAP RENDERING, REORDERING, SAVING, REFRESHING ---------- */

     // loadProcessMap - load / refresh the process map
        function loadProcessMap(){
          // console.log('loadProcessMap');
          // add an 'Add New Step' box to the bottom of the process map if we're in edit mode
          var numberSteps = parseInt("<%=@steps.length%>");
          if((editMode | showMode) && ("<%= @authorLoggedIn %>" == true)){
              newProject = numberSteps == 1;
            }

            // if we're on the new step page, add the add new step box to the correct location on the process map 
            else if($('#processMap').hasClass("new")){
              var step_name = "";
              // console.log('branch_label: ' + is_branch_label);
              is_branch_label = "<%=params[:label]%>" == "true";
              if(is_branch_label){
                step_name = "New Branch Label";
              }else{
                step_name = "New Step";
              }
              // console.log('newStepParentID: '  + newStepParentID);
              if(newStepParentID &&  newStepParentID.length > 0){
                if($('ul.'+newStepParentID).length > 0){
                    // console.log('adding ul');
                      $('ul.'+newStepParentID).append('<li class="newStep">'+step_name+'</li>');
                 }
                 else{
                    // console.log('adding li');
                     $('li.'+newStepParentID).append('<ul><li class="newStep">'+step_name+'</li></ul>');
                 }
              }else{
                // console.log('adding new step');
                $('#org').append('<li class="newStep">'+step_name+'</li>');
              }
              
            }

            if(numberSteps > 0 || (editMode || newMode)){
              // console.log('loading jorgchart');
                $("#org").jOrgChart({
                  chartElement : '#chart',
                  dragAndDrop  : true
                });                

              // append the parentID to the new step node
              $('.stepNode.newStep').data('parentID', newStepParentID);
            }

            // turn off draggable from stepNodes
            $('.stepNode').not('.newStep').draggable("disable");

            setBackgrounds();
        }

        // setBackgrounds() - change background of all stepNode divs to the default image for the step
        function setBackgrounds(){
            // console.log("setting backgrounds");
            var divs = document.getElementsByClassName("stepNode");
            for(var k=0; k< divs.length; k++){
              if($(divs[k]).data("image") != undefined){
                  $(divs[k]).css("background", 'url(' + $(divs[k]).data("image") + ') center');
              }
            }
          }

          // function moveMap(element)
          // Scrolls the process map so the selected step is in view
          // element = stepNode
          function moveMap(element){
              // move the step into view if it's obscured behind the infoContainer
             if( ($(element).offset().left + $(element).width()) > $('#infoContainer').offset().left ){
                // console.log('scroll left');
                var nodeLeft = $(element).offset().left + $('#processMap').scrollLeft() - ($(window).width() - $('#infoContainer').offset().left)/2;
                // console.log('nodeLeft: ' + nodeLeft);
                $('#processMap').animate({
                  scrollTop: $(element).offset().top - $(element).height(),
                  scrollLeft: nodeLeft
                });
            }else if( ($(element).offset().left - $(element).width()) < 0 ){
              // move the step into view if it's obscured at the left edge
              // console.log('scroll right');
              var nodeLeft = $('#processMap').scrollLeft() - ($(element).offset().left + $(element).width())*-1 - ($(window).width() - $('#infoContainer').offset().left)/2;
              // console.log('nodeLeft: ' + nodeLeft);
              $('#processMap').animate({
                scrollTop: $(element).offset().top - $(element).height(),
                scrollLeft: nodeLeft
              });
            }else if($(element).offset().top < 0){
              // move the step into view by scrolling down
              // console.log('scroll down');
              var nodeTop = $(element).offset().top*-1;
              $('#processMap').animate({
                scrollTop: nodeTop
              })
            }else if($(element).offset().top + $(element).height() > $(window).height()){
              // move the step into view by scrolling up
              // console.log('scroll up');
              var nodeTop = $('#processMap').scrollTop() + $(element).offset().top + $(element).height() - $(window).height();
                $('#processMap').animate({
                scrollTop: nodeTop
              });
            }
          }

          // Change the border of the step box in the process map and move into view if it's obscured
          function makeCurrentStep(element){
             $('.currentStepNode').removeClass('currentStepNode');
             $(element).addClass('currentStepNode');  
              if($(element).hasClass('branch_label')==false){
               if(!mouseInProcessMap){
                $(element).css('opacity', 1.0); 
               }
             }

             if(!mouseInProcessMap){
                $('.stepNode:not(.currentStepNode):not(.branch_label)').css('opacity', 0.5);
                $('.stepNode.branch_label').css('opacity', 1.0);
             }
             if($('#mobileProcessMap').length == 0){
                moveMap(element); 
             }
          }

          // getCurrentStep - return the current step
          function getCurrentStep(){
            return $('.currentStepNode');
          } 

  /* -------- PROCESS MAP RENDERING END ---------- */

   /* -------- Detail View Stuff ---------- */

  function showProjectInfo(){
      $('.detailView').fadeOut().promise().done(function(){
        $('#projectTitleBar').addClass('overview');
        $('#projectTitleBar .stepName').hide();
        $('#projectInfoContainer').fadeIn();  
        // reset process map
        $('.stepNode').fadeTo('fast', 1.0); 
        $('.currentStepNode').removeClass('currentStepNode');
        $('.fa-angle-double-down').addClass('fa-angle-double-up').removeClass('fa-angle-double-down');
        minimized = false;
        currentStep = "";
      });

  }

      // function hideInfo()
    // hide the project info / step info underneath the project title bar
    function hideInfo(){
        $('.stepInfo').slideUp();
        $('.fa-angle-double-up').addClass('fa-angle-double-down').removeClass('fa-angle-double-up');
        if($('#projectInfoContainer').css('display')!="none"){
          $('#projectInfoContainer').slideUp();
        }
        $('.fa-angle-left').css('visibility', 'hidden');
        $('.fa-angle-right').css('visibility', 'hidden');
        minimized = true;
    }

    // function showInfo()
    // show the project / step info underneath the project title bar
    function showInfo(){
      if($('.stepName').css('display') == "none" || $('.stepName').html().trim().length == 0){
          $('#projectInfoContainer').slideDown();
        }else{
          $('.stepInfo').slideDown();    
        }
        $('.fa-angle-double-down').addClass('fa-angle-double-up').removeClass('fa-angle-double-down');
        minimized = false;
    }

  /* -------- Detail View Stuff End ---------- */


  /* -------- PROCESS MAP REORDERING ---------- */


    // turn on reorder functionality
    function turnOnReorder(){
      // console.log('turn on reorder');
      reorderMode = true;
      $('.reorderIcon').addClass('active');
      $('#reorderInstructions').css('display', 'visible');
      $('#reorderInstructions').fadeIn('fast');
      $('#reorderButtons').css("display", "visible");
      $('.stepNode').draggable('enable');
      $('.stepNode.newStep').removeClass('ui-droppable');
    }

    // turn off reorder functionality
    function turnOffReorder(){
      // console.log('turn off reorder');
      reorderMode = false;
      $('.reorderIcon').removeClass('active');
      if(newProject){
        $('.reorderIcon').attr('disabled', true);
      }else{

        if(parseInt("<%=@steps.length%>")>=3){
          $('.reorderIcon').attr('disabled', false);  
        }else{
          $('.reorderIcon').attr('disabled', true);  
        }
        
        $('#reorderInstructions').fadeOut('fast');
        $('#reorderButtons').css("display", "none");
        $('.stepNode').not('.newStep').draggable("disable");
      }
      firstLoaded = true;
    }

      // check if the process map has been rearranged
      function stepsReordered(){
        var reordered = !(orgHistory[historyIndex-1] == $('#org').children('li').children('ul:first').html());
        return reordered;
      }

      // save the new step order
      function saveOrdering(){
        if(!newMode || (newMode && !$('.update_step_button').prop('disabled'))){
          // console.log("---------SAVING NEW ORDERING---------");
          var newStepArray = createStepMapArray();

          $.ajax({
            url: "/projects/<%=@project.id%>/steps/update_ancestry",
            type: 'GET',
            data: {stepMapArray: newStepArray}
          });

          if(newMode){
              var newStepPosition = position('newStep');
              // console.log('newStepPosition: ' + newStepPosition);

              // set the position value for the new step
              $('#step_position').val(newStepPosition);

              // console.log('submit form');
              $('.formtastic.step').submit();
              $('.update_step_button').prop("disabled",true);
          }

          orgHistory[historyIndex]=$('#org').clone(); // store any changes to orgHistory -> used to determine if logging is needed
          historyIndex++;
        }
      }

    /* -------- PROCESS MAP ORDERING END ---------- */


    /* -------- PROCESS MAP PANNING ---------- */

    var chartWidth;  // width of process map (to determine whether resize is necessary)

    function setProcessMapSize(){
      // console.log('setProcessMapSize');

      var infoContainerRight = parseInt($('#infoContainer').css('right')) || parseInt($('.processBlog').css('right')); // how far the detail view is from the right of the page
      // console.log('infoContainerRight: ' + infoContainerRight);
      var processMapLeft = parseInt($('#chart').css('margin-left')); // how far the process map is from the left of the page
      // console.log('processMapLeft: ' + processMapLeft);
      var titleWidth = $('#projectTitleBar').width() || parseInt($('.processBlog').css('width'));
      // console.log('titleWidth: ' + titleWidth);
      var expanded = false;

      if($('.jOrgChart table').length > 0){
        if($('.jOrgChart table').first().width() + $('.jOrgChart table').first().position().left >= $(window).width()-titleWidth-infoContainerRight-processMapLeft){
          // console.log("expand width");
          
          expanded = true;
          // set width of chart to be larger than process map
            if($('#chart').width() != chartWidth){
                // console.log('resizing chart width');
                $('#chart').css('width', parseInt(($('#chart table').first().width()+$('#chart table').first().offset().left)*1.7));
                chartWidth = $('#chart').width();
            }
          }
          if($('.jOrgChart table').first().height()+$('.jOrgChart table').first().offset().top >= $(window).height()-$('.navbar').height()){
            // console.log('expand height');
            expanded = true;
            // set process map size
            $('#processMap').css('max-height', $(window).height()-$('.navbar').height());  
            $('#chart').css('height', parseInt($('#chart').css('height')));
          }
      }

      $('#processMap').css('min-height', $(window).height() - $('.navbar').height());

      // size step detail view
      $('.stepDetailView').css('max-height', $(window).height() - $('.navbar').height()-$('#projectTitleBar').height() - 40);

       // set left margin of process map for single branch projects
       if($('.jOrgChart table').width() < 150){
        $('.jOrgChart table').first().css('margin-left', '150px'); 
        $('.jOrgChart table').first().css('margin-top', '20px'); 
       }else{
        $('.jOrgChart table').first().css('margin', '20px'); 
       }
    }

    /* -------- PROCESS MAP PANNING END---------- */


    /* -------- PROCESS MAP TOOLTIPS ---------- */


      // set placement of tooltip to bottom if the process map has more than one branch
      // otherwise, set placement of tooltip to bottom
      function createTooltips(){
    
        var process_map_width = $('.jOrgChart table').width();
        var single_branch_width_min = 100;
        var single_branch_width_max = 102;
        var single_branch = (process_map_width >= single_branch_width_min && process_map_width <= single_branch_width_max);

        var end = $('.stepNode').length;

         // place tooltip of all steps besides the add new step div
          if(single_branch){
            $('.stepNode').filter(function(){ return $(this).children('.stepLabel').text().indexOf('...')>0; }).slice(0, end).tooltip({
              placement: 'right',
            });
          }else{
            $('.stepNode').filter(function(){ return $(this).children('.stepLabel').text().indexOf('...')>0; }).tooltip({
              placement: 'bottom',
            });
          }
          $('.stepNode').filter(function(){ return $(this).children('.stepLabel').text().indexOf('...')<0; }).removeAttr('title');
       }

    /* -------- PROCESS MAP TOOLTIPS END ---------- */


    window.addEventListener('load', function(){
      // size project page based on browser dimensions
      // resizeDivs($(window).width(), $(window).height());

      // add background image of all steps in the process map to their default image
      var divs = document.getElementsByClassName("stepNode");
      for(var k=0; k< divs.length; k++){
        var element = $(divs[k]);
        if(element.data("image") != undefined){
          // console.log('data-image: ' + element.data('image'));
          var image_rotation = element.data('rotation')
          // console.log('data-rotation: ' + image_rotation);
          if(image_rotation!=undefined){
            // apply rotated image to step container
            // console.log('applying rotated image to step container');
            var node_id = getID(element.attr('class'));
            // console.log('node_id: ' + node_id);
            // apply before styling to page
            $('head').append('<style> .step_'+node_id+':before {background: url("'+element.data('image')+'"); -webkit-transform: rotate(' + image_rotation+'deg); -mozkit-transform: rotate(' + image_rotation+'deg);}</style>');
            element.addClass('transform');
          }else{
            element.css("background-image", 'url(' + $(divs[k]).data("image") + ')');
          }          
        }
      }
    });

// function setProjectName
// adds project name to process map
function setProjectName(){
    if(indexMode && $('#projectNameNode').length==0){
    $('.jOrgChart').first().prepend('<div id="projectNameNode"><%=@project.title%></div>');  
    if($('.stepNode').length>0){
        var projectNamePosition = $('.stepNode').first().offset().left-$('.stepNode').outerWidth()- ($('#projectNameNode').outerWidth() - $('.stepNode').outerWidth())/2 - $('#chart').position().left-3;
        // console.log('projectNamePosition: ' + projectNamePosition);
        $('#projectNameNode').css('margin-left', projectNamePosition);
      }else{
        $('#projectNameNode').hide();
        $('#projectTitleBar .fa').hide();
      }
  }
}


$(document).ready(function(){

  if(parseInt("<%=@project.steps.length%>")>0){
    newStepParentID = "<%=@parentID%>";  
    loadProcessMap();  
  }

  setProjectName();

  /* -------- ------ DetailView Stuff End -------------- */   

  /* -------- PROCESS MAP LABELS --------- */
    $('.stepNode.branch_label').each(function(){
      $(this).children('.stepLabel').css('background', $(this).attr('data-label-color'));
      if(authorLoggedIn=="false"){
        $(this).addClass('noHighlight');
      }
    });

  /* -------- PROCESS MAP LABELS END---------- */

  /* -------- PROCESS MAP REORDERING ---------- */

      // User starts dragging out add new step block

      if($('#mobileProcessMap').length == 0){
         $('.newStep').hover(function(){
            $('.stepNode').draggable('enable');
          },
          function(){
            $('.stepNode').draggable("disable");
          });
      }

      $('.newStep').mousedown(function(){
        $('.stepNode').draggable('enable');
      });

      // undo button clicked - undo reordering of the process map
      $('.undoIcon').click(function(){
        if(!$(this).hasClass('disabled')){
          undoOrdering();
        }
      });

      // Edit Process Map Ordering
      $('.reorderIcon').click(function(){
        if (!reorderMode){
          turnOnReorder();
        }
        else{
          turnOffReorder();
        }
      });

      if(parseInt("<%=@project.steps.count %>") < 3 ){
        turnOffReorder();
      }


  /* -------- PROCESS MAP REORDERING END---------- */


  // help button clicked - open up help page in new tag
  $('.helpIcon').click(function(){
    window.open('<%=help_path%>');
  });

  createTooltips(); 

});  // end document load

 $(window).bind("refresh", function(){
    reorderMode = false;
    setProcessMapSize();
    setProjectName();

    // ensure label has the correct label styling when dropped
    if(newMode && is_branch_label){
      $('.stepNode.newStep').addClass('branch_label');
      $('.stepNode.newStep').removeClass('short');
    }

    // reapply background colors to label
    $('.stepNode.branch_label').each(function(){
      $(this).children('.stepLabel').css('background', $(this).attr('data-label-color'));
    });

    $('#reorderInstructions').hide();

    firstStepID = $('#org li:first').attr("class");
    
    authorLoggedIn = "<%=@authorLoggedIn%>";

    if(<%=@authorLoggedIn%> == true && indexMode){
      $('.stepNode').hover(function(){
        // console.log('enabling stepNode draggable');
        $('.stepNode').draggable('enable');
      },
      function(){
        $('.stepNode').draggable("disable");
      });
    }else if(newMode){
      $('.stepNode').not('.newStep').draggable("disable");
    }

    $('.branch_label').hover(function(){
      if(<%=@authorLoggedIn %> == true ){
        // console.log('changing to pointer');
        $(this).css('cursor', 'pointer');
      }
    },function(){
      if(<%=@authorLoggedIn%> == true ){
        $(this).css('cursor', 'default');
      }
    });

    if($('#mobileProcessMap').length>0){
        $('.stepNode').draggable('disable');
    }
 
    // Jump to a step from the process map
    $('.stepNode').click(function(){
      $('#processMapInstructions').hide();
      $('#projectTitleBar').removeClass('overview');

      // stop all videos
      if(getCurrentStep().length > 0){
       reset_videos($('.mainPhoto.' + getID(getCurrentStep().attr('class')))); 
      }else{
        // console.log('resetting project images carousel');
        reset_videos($('.projectImages.carousel')); 
      }
      
      var stepID = getID($(this).attr('class'));
      clickedStep = stepID;
      
      $('.stepInfo').slideDown();  
       if($(this).find('.stepLabel').hasClass('branchStepLabel') == false || ($(this).find('.stepLabel').hasClass('branchStepLabel') && authorLoggedIn=="true")){
        $('.detailView').hide();
        $('#step_'+stepID).fadeIn();      
        $('#projectTitleBar').fadeIn();
        $('#projectInfoContainer').hide();

        // set the name of the step to the title bar
        var stepName = $('#step_'+stepID).find('.detailViewStepName').text().trim();
        // console.log('stepName: ' + stepName);
        $('#projectTitleBar .stepName').show().html(' >> ' + stepName);
      }

      // highlight step in process map
      makeCurrentStep($(this));
      
      
      $('.fa-angle-double-down').addClass('fa-angle-double-up').removeClass('fa-angle-double-down');
      minimized = false;
      currentStep = parseInt(stepID);
      if($('#mobileProcessMap').length == 0 && indexMode){
        navArrowVisibility();  
      }

      // mobile process map specific stuff
      if($('#mobileProcessMap').length > 0){
          $('.stepNode').draggable('enable');

          $("body").bind('tap', function(e) {
             if ($(e.target).closest('.stepNode').length) { 
              } else { 
                // user tapped on background - remove focus on selected step
                makeCurrentStep();
                $('.stepNode').css('opacity', 1.0);
            }
          });
      }


    });


    // jump to project description
    $('.projectName').click(function(event){
      showProjectInfo();
    });

    $('#projectNameNode').click(function(){
      showProjectInfo();
      reset_videos($('.mainPhoto.' + getID(getCurrentStep().attr('class')))); 
    })

    $('.fa.toggle').click(function(e){
        // console.log('clicked projectTitleBar with minimized ' + minimized);
        if(minimized){
          // show
          showInfo();
          minimized = false;
        }else{
          // hide
          hideInfo();
          minimized = true;
        }
        navArrowVisibility();
        e.stopImmediatePropagation();
   });

    $('.fa-angle-left').click(function(){
      // return to previous step
      if(currentStep != stepIDs[0] && currentStep){
        var currentStepIndex = stepIDs.indexOf(currentStep);
        var prevStepID = stepIDs[currentStepIndex-1];
        $('.stepNode.'+prevStepID).click();
        // lazy load
        lazyContainer($('#carousel-'+prevStepID));
      }else if(currentStep == stepIDs[0]){
        showProjectInfo();
        currentStep = "";
      }else{
        // console.log('going to last step');
        $('.stepNode.' + stepIDs[stepIDs.length-1]).click();
      }
      navArrowVisibility();
    });

    $('.fa-angle-right').click(function(){
      // console.log('clicked right');

      // go to next step
      if(currentStep){
          var currentStepIndex = stepIDs.indexOf(currentStep);
          var nextStepID = stepIDs[currentStepIndex+1];
          // console.log('nextStepID: ' + nextStepID);
          $('.stepNode.'+nextStepID).click();
          // lazy load
          lazyContainer($('#carousel-'+nextStepID));
          if(nextStepID == stepIDs[stepIDs.length-1]){
            $('#projectTitleBar .fa-angle-right').css('visibility', 'hidden');
          }
      }else{
        $('.stepNode.'+stepIDs[0]).click();
        // console.log('nextStepID: ' + stepIDs[0]);
      }
      navArrowVisibility();
    });


    $('#processMap').hover(function(){
      // console.log('hovering in processmap');
         mouseInProcessMap = true;
         if(indexMode){
          $('.stepNode').fadeTo('fast', 1.0); 
         }
      }, function(){
        mouseInProcessMap = false;
        if($('.currentStepNode').length> 0 && indexMode){
          $('.stepNode:not(.currentStepNode):not(.branch_label)').fadeTo('fast', 0.5);  
        }
    });


    // add question marker to steps that have questions
    $('.stepNode.question').each(function(){
      $(this).append('<div class="vert-ribbon"><div class="container"><div class="base">?</div><div class="left_corner"></div><div class="right_corner"></div></div></div>');
    });

    // add pin marker to steps that have pins
    $('.stepNode.pin').each(function(){
      var pin_type = $(this).attr('data-pin');
      var pin_class = PIN_TYPES[pin_type];
      // console.log('pin_type : ' + pin_type);
      $(this).append("<div class=pin><icon class='fa fa-" + pin_class +  "'</div>")
    });

    if(parseInt("<%=@steps.length%>")>=3){
      $('.reorderIcon').attr('disabled', false);  
    }else{
      $('.reorderIcon').attr('disabled', true);  
    }
    $('.reorderIcon').removeClass("active");  
    
}); // end window refresh

 /* -------- PAGE SCROLLING - SCROLL TO STEP, COMMENT ---------- */

  function goToStepComment(step_id, comment_id){
     $('.stepNode.step_'+step_id).click();
     $(':animated').promise().done(function(){
           // scroll to comment
          $("#comment_"+comment_id).animateHighlight("#E6E6E6", 5000);  
          $('.stepDetailView').animate({scrollTop: $('#comment_'+comment_id).position().top});
     });
  }


</script>
