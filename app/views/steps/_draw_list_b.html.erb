<% # draw the unordered list that gets turned into a tree structure using the jquery.jOrgChart.js file %>

<script type="text/javascript">
    // save the original order of the steps in the process map
    function saveOriginalOrder(){
      originalStepOrder = $('#org').clone();
    }
</script>

<% (0..@ancestry.length-1).each do |index| %>
	<% currentStep = @steps.where("position" => index).first %>
	<% currentStepAncestry = currentStep.ancestry %>

	<script type="text/javascript">
    var lastStepReached = false; // checks whether we're on the last step of a project (as marked by the last attribute)
    var has_question = false; // whether or not the step has an unanswered question
		// console.log(" ");
		// console.log("index: <%=index%>");
		// console.log("currentStep: <%=currentStep.name%>");
    // console.log("currentStepLast: <%=currentStep.last%>");
    // console.log("currentStepID: <%=currentStep.id%>");
		// console.log('currentStepAncestry: <%=currentStepAncestry%>');

	</script>

 <% if currentStep.last==true %>
    <script type="text/javascript">
        lastStepReached = true;
    </script>
<% end %>

<% if currentStep.has_unanswered_question? %>
  <script type="text/javascript">
    has_question = true;
  </script>
<% end %>

	<% if index == 0 %>
		<script type="text/javascript">
			// console.log("first step");
			$('ul.0').append("<li class= '<%= currentStep.id %>'> <%= currentStep.name %></li>");
		</script>	 

	<% elsif @ancestry[index] == @ancestry[index-1] %>		
    <% if @ancestry[index]!= nil %>
      <% currentStepAncestry = getParent(currentStepAncestry)%>
    <% end %>
			<script type="text/javascript">
          $('ul.'+'<%=currentStepAncestry%>').append("<li class= '<%= currentStep.id %>'> <%= currentStep.name %></li>");
			 </script>
	<% else %>
      <% if @ancestry.index(currentStepAncestry) == index %>
        <% currentStepAncestry = getParent(currentStepAncestry)%>
    		<script type="text/javascript">
          if($('ul.<%=currentStepAncestry%>').length > 0){
            
             $('ul.'+'<%=currentStepAncestry%>').append("<li class= '<%= currentStep.id %>'> <%= currentStep.name %></li>");
          }
          else{
            // console.log("first step with this ancestry");
    			   $('li.'+'<%=currentStepAncestry%>').append("<ul class= '<%= currentStepAncestry %>'><li class= '<%=currentStep.id %>'>  <%= currentStep.name %></li></ul>");
          }
    		</script>	
      <% else %>
          <% currentStepAncestry = getParent(currentStepAncestry)%>
        	<script type="text/javascript">
            // console.log("returned to existing branch");
            $('ul.'+'<%=currentStepAncestry%>').append("<li class= '<%= currentStep.id %>'> <%= currentStep.name %></li>");
        </script> 	
      <% end %>
	<% end %>
  <script type="text/javascript">
    // add "last" id to the last step
    if(lastStepReached){
      // console.log("adding last step id");
      $('li.'+'<%=currentStep.id%>').attr("id", "last");
    }
    if(has_question){
      $('li.'+'<%=currentStep.id%>').addClass("question");
    }
  </script>

  <% # add the image path of the step's default image for previews%>
  <% if (currentStep.images.count > 0) %>
      <% if !currentStep.first_image.is_remix_image? %>
          <% # set the default image to the step's first image %>
          <script type="text/javascript">
            var id = <%=currentStep.id%>;
            $('li.'+id).attr("data-image", "<%=currentStep.first_image.image_path_url(:thumb)%>");
          </script>
      <% elsif !currentStep.first_image.original_image.blank? %>
        <% # get the remix image %>
          <script type="text/javascript">
            var id = <%=currentStep.id%>;
             $('li.'+id).attr("data-image", "<%=Image.find(currentStep.first_image.original_id).image_path_url(:thumb)%>");
          </script>
      <% end %>
  <% else %>
    <% # if we're on the project overview, set the default image to the default image of the last step %>
    <% if currentStep.position == 0 && !@project.default_image.blank? %>
      <% # set the default image to the first image of the last updated step %>
        <script type="text/javascript">
          var id = <%=currentStep.id%>;
          $('li.'+id).attr("data-image", "<%=@project.default_image.image_path_url(:thumb)%>");
        </script>
    <% end %>
  <% end %>
  
<% end %>

<script>
/**
 * jQuery org-chart/tree plugin.
 *
 * Author: Wes Nolte
 * http://twitter.com/wesnolte
 *
 * Based on the work of Mark Lee
 * http://www.capricasoftware.co.uk 
 *
 * Copyright (c) 2011 Wesley Nolte
 * Dual licensed under the MIT and GPL licenses.
 *
 */
(function($) {

  var newStepDropped = false; // boolean to store the state of the 'Add new step' box

  $.fn.jOrgChart = function(options) {
    if(indexMode | showMode){
      // clear the "add new step" block from the newStepDiv
      // console.log("removing the newStep from the newStepDiv");
      $('#newStepDivSlide').children('.newStep').remove();
    }
    
    var opts = $.extend({}, $.fn.jOrgChart.defaults, options);
    var $appendTo = $(opts.chartElement);

    // build the tree
    $this = $(this);   
    var $container = $("<div class='" + opts.chartClass + "'/>");
    if($this.is("ul")) {
      buildNode($this.find("li:first"), $container, 0, opts);
    }
    else if($this.is("li")) {
      buildNode($this, $container, 0, opts);
    }
    // add the "add new step" step to the process map
    if((indexMode | showMode) && !newProject && "<%= @authorLoggedIn %>"){
       // buildNode($('li.newStep'), $container, 0, opts);
    }

    $appendTo.append($container);

    // add drag and drop if enabled
    if(opts.dragAndDrop){
        $('.stepNode').draggable({
            cursor      : 'move',
            distance    : 20,
            helper      : 'clone',
            opacity     : 0.8,
            revert      : 'invalid',
            revertDuration : 100,
            snap        : '.stepNode.expanded',
            snapMode    : 'inner',
            stack       : '.stepNode',
            zIndex      : 100
        });
        
        $('.stepNode').droppable({
            accept      : '.stepNode',          
            activeClass : 'drag-active',
            hoverClass  : 'drop-hover'
        });
        
      // Drag start event handler for nodes
      $('.stepNode').bind("dragstart", function handleDragStart( event, ui ){
        var sourceNode = $(this);
        if(!$(this).hasClass("newStep")){
          sourceNode.parentsUntil('.node-container')
                     .find('*')
                     .filter('.stepNode')
                     .droppable({disabled: true});
        }
      });

      // Drag stop event handler for nodes
      $('.stepNode').bind("dragstop", function handleDragStop( event, ui ){

        /* reload the plugin */
        $(opts.chartElement).children().remove();
        $('#newStepDiv').children('.newStep').remove();
        $this.jOrgChart(opts);  
        $('.stepLabel').ellipsis();    
      });
    
      // Drop event handler for nodes
      $('.stepNode').bind("drop", function handleDropEvent( event, ui ) {    
    
        var targetID = $(this).data("tree-node");
        var targetLi = $this.find("li").filter(function() { return $(this).data("tree-node") === targetID; } );
        console.log("targetLi: " + targetLi.attr("class"));
        var targetUl = targetLi.children('ul');
    
        var sourceID = ui.draggable.data("tree-node");    
        var sourceLi = $this.find("li").filter(function() { return $(this).data("tree-node") === sourceID; } );   
        var sourceUl = sourceLi.parent('ul');

        if (targetUl.length > 0){
          targetUl.append(sourceLi);
        } else {
          targetLi.append("<ul class=" + targetLi.attr("class") + "></ul>");
          targetLi.children('ul').append(sourceLi);
        }
        //Removes any empty lists
        if (sourceUl.children().length === 0){
          sourceUl.remove();
        }

        if(targetLi.attr("class")==firstStepID){
          console.log("*************** Dropped on project overview ***************");
          console.log("sourceStep: " + sourceLi.attr("class"));
          console.log("number of lis: " + parseInt($('li.'+sourceLi.attr("class")).length));
          var numLi = $('li.'+sourceLi.attr("class")).length
          for(var k = 1; k < numLi; k++){
            console.log("k: " + k);
            $('li.'+sourceLi.attr("class")+":last").remove();
          }
        }

        // check if the 'Add New Step' box was dropped onto the process map
        if($(ui.draggable).hasClass('newStep')){
          console.log("dropped new step");
          newStepDropped = true;

          // hide the newStepDiv and enlarge the process map area
          $('#newStepDiv').hide();
          var offset = 125;
          var height = $(window).height() - offset;
          var heightOffset = 30;
          
          $('#chart').css("height", height-heightOffset);       

          var parentStep = parseInt($('li.newStep').parent('ul').parent('li').attr("class"));
          console.log('parentStep: '+parentStep);
          
          // redirect to new step page
          var project = <%=@project.id %>;
          $.ajax({
            url: "<%=create_branch_project_steps_path(@project)%>",
            type: 'GET',
            data: {parent: parentStep} 
          });
        }
        else{
            // show save and cancel buttons
            // $('#reorderButtons').show();
            console.log("dropped step");
            reorderMode = true;

            $('.reorderIcon').addClass("active");
            $('.undoIcon').removeClass('disabled');
            $('.undoIcon').unbind('click', false);
          
            $('#saved').css('display', 'visible');
            $('#saved').fadeIn(600).delay(800);
            $('#saved').fadeOut(600);

            // save new order

            if("<%= @authorLoggedIn %>"=="true"){
              saveOrdering();  
            }
            
          
          // resize chart area
          //console.log("dropped handle");

        }
    
      }); // handleDropEvent
        
    } // Drag and drop

    // set background of divs to default step image
    setBackgrounds();

    // remove the extra table
    if(newStepDropped && !newProject && $('#newStepDiv').length != 0){
      $('table:last').remove();
    }

    // apply elipses to stepLabels with overflow
    $('.stepLabel').ellipsis();

    // move the 'Add new step' block to the newStep div
    if(!newStepDropped){
      // console.log("moving newStepDiv");
      $('#newStepDivSlide').prepend($('div.newStep'));

      $('.newStep').droppable({"disabled": true});
    }

    if(firstLoaded){
      firstLoaded = false;
      saveOriginalOrder();
      if((indexMode | editMode) && "<%= @authorLoggedIn %>"=="true"){
        saveOrdering();  
      }
    }

    $(window).trigger("refresh");  

  };

  // Option defaults
  $.fn.jOrgChart.defaults = {
    chartElement : 'body',
    depth      : -1,
    chartClass : "jOrgChart",
    dragAndDrop: false
  };
  
  var nodeCount = 0;
  
  // Method that recursively builds the tree
  function buildNode($node, $appendTo, level, opts) {
    var $table = $("<table cellpadding='0' cellspacing='0' border='0'/>");
    var $tbody = $("<tbody/>");

    // Construct the node container(s)
    var $nodeRow = $("<tr/>").addClass("node-cells");
    var $nodeCell = $("<td/>").addClass("node-cell").attr("colspan", 2);
    var $childNodes = $node.children("ul:first").children("li");
    var $nodeDiv;
    
    if($childNodes.length > 1) {
      $nodeCell.attr("colspan", $childNodes.length * 2);
    }

    // Draw the node
    // Get the contents - any markup except li and ul allowed
    var $nodeContent = $node.clone()
                            .children("ul,li")
                            .remove()
                            .end()
                            .html();

    // console.log("nodeContent: " + $nodeContent.trim());

    var stepID = $node.clone().attr("class");
    var lastID = $node.clone().attr("id");
    var image_path = $node.data("image");
    var parent = $node.data("parent");
  
    // console.log("lastID: " + lastID);
      //Increaments the node count which is used to link the source list and the org chart
    nodeCount++;
    $node.data("tree-node", nodeCount);
    $node.data("image", image_path);
    $nodeDiv = $("<div>").addClass("stepNode")
                                     .addClass(stepID)
                                     .attr("title", $nodeContent)
                                     .data("image", image_path)
                                     .data("tree-node", nodeCount) 
                                     .data("parent", parent)
                                     .append("<p class='stepLabel'>" + $nodeContent + "</p>");
    if(lastID=="last"){
      // $nodeDiv.children('p').addClass("builtLabel");
      $nodeDiv.children('p').remove();
      $nodeDiv.append("<div class='ribbon-wrapper'><div class='ribbon'>built!</div></div>")
    }

    $nodeCell.append($nodeDiv);
    $nodeRow.append($nodeCell);
    $tbody.append($nodeRow);

    if($childNodes.length > 0) {
    
      // recurse until leaves found (-1) or to the level specified
      if(opts.depth == -1 || (level+1 < opts.depth)) { 
        var $downLineRow = $("<tr/>");
        var $downLineCell = $("<td/>").attr("colspan", $childNodes.length*2);
        $downLineRow.append($downLineCell);
        
        // draw the connecting line from the parent node to the horizontal line 
        $downLine = $("<div></div>").addClass("line down");
        $downLineCell.append($downLine);
        $tbody.append($downLineRow);

        // Draw the horizontal lines
        var $linesRow = $("<tr/>");
        if($childNodes.length>1){
          $childNodes.each(function() {
            var $left = $("<td>&nbsp;</td>").addClass("line left top");
            var $right = $("<td>&nbsp;</td>").addClass("line right top");
            $linesRow.append($left).append($right);
          });
        }

        //horizontal line shouldn't extend beyond the first and last child branches
        $linesRow.find("td:first")
                    .removeClass("top")

                 .end()
                 .find("td:last")
                    .removeClass("top")

        $tbody.append($linesRow);
        var $childNodesRow = $("<tr/>");

        $childNodes.each(function() {
           var $td = $("<td class='node-container'/>");
           $td.attr("colspan", 2);
           // recurse through children lists and items
           buildNode($(this), $td, level+1, opts);
           $childNodesRow.append($td);
        });

      }
      $tbody.append($childNodesRow);
    }

    $table.append($tbody);
    $appendTo.append($table);
    
  };

})(jQuery);
</script>
